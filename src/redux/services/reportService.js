// import api from "../api"

// // Define the API endpoints
// export const reportService = api.injectEndpoints({
//   endpoints: (builder) => ({
//     getDashboardSummary: builder.query({
//       query: (params) => ({
//         url: "/reports/dashboard",
//         params,
//       }),
//       providesTags: ["Report"],
//     }),
//     getSalesReport: builder.query({
//       query: (params) => ({
//         url: "/reports/sales",
//         params,
//       }),
//       providesTags: ["Report"],
//     }),
//     getVendorReport: builder.query({
//       query: (params) => ({
//         url: "/reports/vendors",
//         params,
//       }),
//       providesTags: ["Report"],
//     }),
//     getDriverReport: builder.query({
//       query: (params) => ({
//         url: "/reports/drivers",
//         params,
//       }),
//       providesTags: ["Report"],
//     }),
//     getCustomerReport: builder.query({
//       query: (params) => ({
//         url: "/reports/customers",
//         params,
//       }),
//       providesTags: ["Report"],
//     }),
//     getFoodReport: builder.query({
//       query: (params) => ({
//         url: "/reports/foods",
//         params,
//       }),
//       providesTags: ["Report"],
//     }),
//     getCategoryReport: builder.query({
//       query: (params) => ({
//         url: "/reports/categories",
//         params,
//       }),
//       providesTags: ["Report"],
//     }),
//     getUserReport: builder.query({
//       query: (params) => ({
//         url: "/reports/users",
//         params,
//       }),
//       providesTags: ["Report"],
//     }),
//     generateCustomReport: builder.mutation({
//       query: (data) => ({
//         url: "/reports/custom",
//         method: "POST",
//         body: data,
//       }),
//     }),
//     downloadReport: builder.query({
//       query: (id) => ({
//         url: `/reports/download/${id}`,
//       }),
//     }),
//     exportReportCSV: builder.mutation({
//       query: ({ reportType, params }) => ({
//         url: `/reports/${reportType}?format=excel`,
//         method: "GET",
//         params,
//         responseHandler: (response) => response.blob(),
//       }),
//     }),
//     exportReportPDF: builder.mutation({
//       query: ({ reportType, params }) => ({
//         url: `/reports/${reportType}?format=pdf`,
//         method: "GET",
//         params,
//         responseHandler: (response) => response.blob(),
//       }),
//     }),
//   }),
// })

// // Export the hooks generated by RTK Query
// export const {
//   useGetDashboardSummaryQuery,
//   useGetSalesReportQuery,
//   useGetVendorReportQuery,
//   useGetDriverReportQuery,
//   useGetCustomerReportQuery,
//   useGetFoodReportQuery,
//   useGetCategoryReportQuery,
//   useGetUserReportQuery,
//   useGenerateCustomReportMutation,
//   useDownloadReportQuery,
//   useExportReportCSVMutation,
//   useExportReportPDFMutation,
// } = reportService

// // Helper functions for export
// export const exportReportToCSV =
//   ({ reportType, params }) =>
//   async (dispatch) => {
//     try {
//       const exportCSV = reportService.useExportReportCSVMutation()[0]
//       const blob = await exportCSV({ reportType, params }).unwrap()

//       // Create a download link and trigger the download
//       const url = window.URL.createObjectURL(blob)
//       const a = document.createElement("a")
//       a.href = url
//       a.download = `${reportType}-report.xlsx`
//       document.body.appendChild(a)
//       a.click()
//       window.URL.revokeObjectURL(url)
//       document.body.removeChild(a)

//       return true
//     } catch (error) {
//       console.error("Error exporting CSV:", error)
//       throw error
//     }
//   }

// export const exportReportToPDF =
//   ({ reportType, params }) =>
//   async (dispatch) => {
//     try {
//       const exportPDF = reportService.useExportReportPDFMutation()[0]
//       const blob = await exportPDF({ reportType, params }).unwrap()

//       // Create a download link and trigger the download
//       const url = window.URL.createObjectURL(blob)
//       const a = document.createElement("a")
//       a.href = url
//       a.download = `${reportType}-report.pdf`
//       document.body.appendChild(a)
//       a.click()
//       window.URL.revokeObjectURL(url)
//       document.body.removeChild(a)

//       return true
//     } catch (error) {
//       console.error("Error exporting PDF:", error)
//       throw error
//     }
//   }

import api from "../api"

// Define the API endpoints
export const reportService = api.injectEndpoints({
  endpoints: (builder) => ({
    getDashboardSummary: builder.query({
      query: (params) => ({
        url: "/reports/dashboard",
        params,
      }),
      providesTags: ["Report"],
    }),
    // getSalesReport: builder.query({
    //   query: (params) => ({
    //     url: "/reports/sales-report",
    //     params,
    //   }),
    //   providesTags: ["Report"],
    // }),
    // In your reportService.js
getSalesReport: builder.query({
  query: (params) => ({
    url: "/reports/sales", // Correct endpoint
    params: {
      startDate: params.startDate,
      endDate: params.endDate,
      interval: params.interval
    },
  }),
  providesTags: ["Report"],
}),
    getVendorReport: builder.query({
      query: (params) => ({
        url: "/reports/vendors",
        params,
      }),
      providesTags: ["Report"],
    }),
    getDriverReport: builder.query({
      query: (params) => ({
        url: "/reports/drivers",
        params,
      }),
      providesTags: ["Report"],
    }),
    getCustomerReport: builder.query({
      query: (params) => ({
        url: "/reports/customers",
        params,
      }),
      providesTags: ["Report"],
    }),
    getFoodReport: builder.query({
      query: (params) => ({
        url: "/reports/foods",
        params,
      }),
      providesTags: ["Report"],
    }),
    getCategoryReport: builder.query({
      query: (params) => ({
        url: "/reports/categories",
        params,
      }),
      providesTags: ["Report"],
    }),
    getUserReport: builder.query({
      query: (params) => ({
        url: "/reports/users",
        params,
      }),
      providesTags: ["Report"],
    }),
    generateCustomReport: builder.mutation({
      query: (data) => ({
        url: "/reports/custom",
        method: "POST",
        body: data,
      }),
    }),
    downloadReport: builder.query({
      query: (id) => ({
        url: `/reports/download/${id}`,
      }),
    }),
    exportReportCSV: builder.mutation({
      query: ({ reportType, params }) => ({
        url: `/reports/${reportType}?format=excel`,
        method: "GET",
        params,
        responseHandler: (response) => response.blob(),
      }),
    }),
    exportReportPDF: builder.mutation({
      query: ({ reportType, params }) => ({
        url: `/reports/${reportType}?format=pdf`,
        method: "GET",
        params,
        responseHandler: (response) => response.blob(),
      }),
    }),
  }),
})

// Export the hooks generated by RTK Query
export const {
  useGetDashboardSummaryQuery,
  useGetSalesReportQuery,
  useGetVendorReportQuery,
  useGetDriverReportQuery,
  useGetCustomerReportQuery,
  useGetFoodReportQuery,
  useGetCategoryReportQuery,
  useGetUserReportQuery,
  useGenerateCustomReportMutation,
  useDownloadReportQuery,
  useExportReportCSVMutation,
  useExportReportPDFMutation,
} = reportService

// Helper functions for export
export const exportReportToCSV =
  ({ reportType, params }) =>
  async (dispatch) => {
    try {
      const exportCSV = reportService.endpoints.exportReportCSV.initiate({ reportType, params })
      const result = await dispatch(exportCSV)
      const blob = result.data

      // Create a download link and trigger the download
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement("a")
      a.href = url
      a.download = `${reportType}-report.xlsx`
      document.body.appendChild(a)
      a.click()
      window.URL.revokeObjectURL(url)
      document.body.removeChild(a)

      return true
    } catch (error) {
      console.error("Error exporting CSV:", error)
      throw error
    }
  }

export const exportReportToPDF =
  ({ reportType, params }) =>
  async (dispatch) => {
    try {
      const exportPDF = reportService.endpoints.exportReportPDF.initiate({ reportType, params })
      const result = await dispatch(exportPDF)
      const blob = result.data

      // Create a download link and trigger the download
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement("a")
      a.href = url
      a.download = `${reportType}-report.pdf`
      document.body.appendChild(a)
      a.click()
      window.URL.revokeObjectURL(url)
      document.body.removeChild(a)

      return true
    } catch (error) {
      console.error("Error exporting PDF:", error)
      throw error
    }
  }
